// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String?
  role          Role           @default(USER)
  location      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  preferences   Json?
  events        Event[]        @relation("CreatedEvents")
  registrations Registration[]
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]     // Add relation to activities
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id           String         @id @default(uuid())
  title        String
  description  String         @db.Text
  date         DateTime
  time         String
  location     String
  image        String?
  category     String
  capacity     Int
  createdBy    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  creator      User           @relation("CreatedEvents", fields: [createdBy], references: [id])
  registrations Registration[]
  activities   Activity[]     // Add relation to activities

  @@index([date])
  @@index([category])
}

model Registration {
  id        String           @id @default(uuid())
  userId    String
  eventId   String
  status    RegistrationStatus @default(REGISTERED)
  qrCodeData String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

// New Activity model to track admin actions
model Activity {
  id         String   @id @default(uuid())
  userId     String
  action     String
  targetType String?  // Can be "EVENT", "USER", "SYSTEM", etc.
  targetId   String?  // ID of the related entity (eventId, userId, etc.)
  targetName String   // Name/title of the target (event title, user name, etc.)
  link       String?  // Link to the related resource
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event      Event?   @relation(fields: [targetId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([targetId])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
}

enum RegistrationStatus {
  REGISTERED
  ATTENDED
  CANCELLED
}